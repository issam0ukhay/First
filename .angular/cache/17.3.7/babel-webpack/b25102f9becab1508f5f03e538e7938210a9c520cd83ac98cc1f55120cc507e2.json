{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i2 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i3 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\nconst _c0 = (a0, a1, a2) => ({\n  $implicit: a0,\n  events: a1,\n  index: a2\n});\nfunction InputOtp_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"input\", 2);\n    i0.ɵɵlistener(\"input\", function InputOtp_ng_container_0_ng_container_1_Template_input_input_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const i_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onInput($event, i_r2 - 1));\n    })(\"focus\", function InputOtp_ng_container_0_ng_container_1_Template_input_focus_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onInputFocus($event));\n    })(\"blur\", function InputOtp_ng_container_0_ng_container_1_Template_input_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onInputBlur($event));\n    })(\"paste\", function InputOtp_ng_container_0_ng_container_1_Template_input_paste_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onPaste($event));\n    })(\"keydown\", function InputOtp_ng_container_0_ng_container_1_Template_input_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onKeyDown($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"value\", ctx_r2.getModelValue(i_r2))(\"maxLength\", 1)(\"type\", ctx_r2.inputType)(\"inputmode\", ctx_r2.inputMode)(\"variant\", ctx_r2.variant)(\"readonly\", ctx_r2.readonly)(\"disabled\", ctx_r2.disabled)(\"invalid\", ctx_r2.invalid)(\"tabindex\", ctx_r2.tabindex)(\"unstyled\", ctx_r2.unstyled)(\"autofocus\", ctx_r2.getAutofocus(i_r2));\n  }\n}\nfunction InputOtp_ng_container_0_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction InputOtp_ng_container_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, InputOtp_ng_container_0_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.inputTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(2, _c0, ctx_r2.getToken(i_r2 - 1), ctx_r2.getTemplateEvents(i_r2 - 1), i_r2));\n  }\n}\nfunction InputOtp_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, InputOtp_ng_container_0_ng_container_1_Template, 2, 11, \"ng-container\", 1)(2, InputOtp_ng_container_0_ng_container_2_Template, 2, 6, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.inputTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.inputTemplate);\n  }\n}\nconst INPUT_OTP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => InputOtp),\n  multi: true\n};\n/**\n * Input Otp is used to enter one time passwords.\n * @group Components\n */\nclass InputOtp {\n  cd;\n  /**\n   * When present, it specifies that the component should have invalid state style.\n   * @group Props\n   */\n  invalid = false;\n  /**\n   * When present, it specifies that the component should be disabled.\n   * @group Props\n   */\n  disabled = false;\n  /**\n   * When present, it specifies that an input field is read-only.\n   * @group Props\n   */\n  readonly = false;\n  /**\n   * Specifies the input variant of the component.\n   * @group Props\n   */\n  variant = 'outlined';\n  /**\n   * Index of the element in tabbing order.\n   * @group Props\n   */\n  tabindex = null;\n  /**\n   * Number of characters to initiate.\n   * @group Props\n   */\n  length = 4;\n  /**\n   * Mask pattern.\n   * @group Props\n   */\n  mask = false;\n  /**\n   * When present, it specifies that an input field is integer-only.\n   * @group Props\n   */\n  integerOnly = false;\n  /**\n   * When present, it specifies that the component should automatically get focus on load.\n   * @group Props\n   */\n  autofocus;\n  /**\n   * Callback to invoke on value change.\n   * @group Emits\n   */\n  onChange = new EventEmitter();\n  /**\n   * Callback to invoke when the component receives focus.\n   * @param {Event} event - Browser event.\n   * @group Emits\n   */\n  onFocus = new EventEmitter();\n  /**\n   * Callback to invoke when the component loses focus.\n   * @param {Event} event - Browser event.\n   * @group Emits\n   */\n  onBlur = new EventEmitter();\n  templates;\n  inputTemplate;\n  tokens = [];\n  onModelChange = () => {};\n  onModelTouched = () => {};\n  value;\n  get inputMode() {\n    return this.integerOnly ? 'numeric' : 'text';\n  }\n  get inputType() {\n    return this.mask ? 'password' : 'text';\n  }\n  constructor(cd) {\n    this.cd = cd;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n        default:\n          this.inputTemplate = item.template;\n          break;\n      }\n    });\n  }\n  getToken(index) {\n    return this.tokens[index];\n  }\n  getTemplateEvents(index) {\n    return {\n      input: event => this.onInput(event, index),\n      keydown: event => this.onKeyDown(event),\n      focus: event => this.onFocus.emit(event),\n      blur: event => this.onBlur.emit(event),\n      paste: event => this.onPaste(event)\n    };\n  }\n  onInput(event, index) {\n    this.tokens[index] = event.target.value;\n    this.updateModel(event);\n    if (event.inputType === 'deleteContentBackward') {\n      this.moveToPrev(event);\n    } else if (event.inputType === 'insertText' || event.inputType === 'deleteContentForward') {\n      this.moveToNext(event);\n    }\n  }\n  updateModel(event) {\n    const newValue = this.tokens.join('');\n    this.onModelChange(newValue);\n    this.onChange.emit({\n      originalEvent: event,\n      value: newValue\n    });\n  }\n  writeValue(value) {\n    if (value) {\n      if (Array.isArray(value) && value.length > 0) {\n        this.value = value.slice(0, this.length);\n      } else {\n        this.value = value.toString().split('').slice(0, this.length);\n      }\n    } else {\n      this.value = value;\n    }\n    this.updateTokens();\n    this.cd.markForCheck();\n  }\n  updateTokens() {\n    if (this.value !== null && this.value !== undefined) {\n      if (Array.isArray(this.value)) {\n        this.tokens = [...this.value];\n      } else {\n        this.tokens = this.value.toString().split('');\n      }\n    } else {\n      this.tokens = [];\n    }\n  }\n  getModelValue(i) {\n    return this.tokens[i - 1] || '';\n  }\n  getAutofocus(i) {\n    if (i === 1) {\n      return this.autofocus;\n    }\n    return false;\n  }\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n  moveToPrev(event) {\n    let prevInput = this.findPrevInput(event.target);\n    if (prevInput) {\n      prevInput.focus();\n      prevInput.select();\n    }\n  }\n  moveToNext(event) {\n    let nextInput = this.findNextInput(event.target);\n    if (nextInput) {\n      nextInput.focus();\n      nextInput.select();\n    }\n  }\n  findNextInput(element) {\n    let nextElement = element.nextElementSibling;\n    if (!nextElement) return;\n    return nextElement.nodeName === 'INPUT' ? nextElement : this.findNextInput(nextElement);\n  }\n  findPrevInput(element) {\n    let prevElement = element.previousElementSibling;\n    if (!prevElement) return;\n    return prevElement.nodeName === 'INPUT' ? prevElement : this.findPrevInput(prevElement);\n  }\n  onInputFocus(event) {\n    event.target.select();\n    this.onFocus.emit(event);\n  }\n  onInputBlur(event) {\n    this.onBlur.emit(event);\n  }\n  onKeyDown(event) {\n    if (event.altKey || event.ctrlKey || event.metaKey) {\n      return;\n    }\n    switch (event.code) {\n      case 'ArrowLeft':\n        this.moveToPrev(event);\n        event.preventDefault();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        event.preventDefault();\n        break;\n      case 'Backspace':\n        if (event.target.value.length === 0) {\n          this.moveToPrev(event);\n          event.preventDefault();\n        }\n        break;\n      case 'ArrowRight':\n        this.moveToNext(event);\n        event.preventDefault();\n        break;\n      default:\n        if (this.integerOnly && !((event.code.startsWith('Digit') || event.code.startsWith('Numpad')) && Number(event.key) >= 0 && Number(event.key) <= 9) || this.tokens.join('').length >= this.length && event.code !== 'Delete') {\n          event.preventDefault();\n        }\n        break;\n    }\n  }\n  onPaste(event) {\n    let paste = event.clipboardData.getData('text');\n    if (paste.length) {\n      let pastedCode = paste.substring(0, this.length + 1);\n      if (!this.integerOnly || !isNaN(pastedCode)) {\n        this.tokens = pastedCode.split('');\n        this.updateModel(event);\n      }\n    }\n    event.preventDefault();\n  }\n  getRange(n) {\n    return Array.from({\n      length: n\n    }, (_, index) => index + 1);\n  }\n  trackByFn(index) {\n    return index;\n  }\n  static ɵfac = function InputOtp_Factory(t) {\n    return new (t || InputOtp)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: InputOtp,\n    selectors: [[\"p-inputOtp\"]],\n    contentQueries: function InputOtp_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [1, \"p-inputotp\", \"p-component\"],\n    inputs: {\n      invalid: \"invalid\",\n      disabled: \"disabled\",\n      readonly: \"readonly\",\n      variant: \"variant\",\n      tabindex: \"tabindex\",\n      length: \"length\",\n      mask: \"mask\",\n      integerOnly: \"integerOnly\",\n      autofocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"autofocus\", \"autofocus\", booleanAttribute]\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([INPUT_OTP_VALUE_ACCESSOR]), i0.ɵɵInputTransformsFeature],\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"type\", \"text\", \"pInputText\", \"\", \"pAutoFocus\", \"\", 1, \"p-inputotp-input\", 3, \"input\", \"focus\", \"blur\", \"paste\", \"keydown\", \"value\", \"maxLength\", \"type\", \"inputmode\", \"variant\", \"readonly\", \"disabled\", \"invalid\", \"tabindex\", \"unstyled\", \"autofocus\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function InputOtp_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, InputOtp_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.getRange(ctx.length))(\"ngForTrackBy\", ctx.trackByFn);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i2.InputText, i3.AutoFocus],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputOtp, [{\n    type: Component,\n    args: [{\n      selector: 'p-inputOtp',\n      template: `\n        <ng-container *ngFor=\"let i of getRange(length); trackBy: trackByFn\">\n            <ng-container *ngIf=\"!inputTemplate\">\n                <input\n                    type=\"text\"\n                    pInputText\n                    [value]=\"getModelValue(i)\"\n                    [maxLength]=\"1\"\n                    [type]=\"inputType\"\n                    class=\"p-inputotp-input\"\n                    [inputmode]=\"inputMode\"\n                    [variant]=\"variant\"\n                    [readonly]=\"readonly\"\n                    [disabled]=\"disabled\"\n                    [invalid]=\"invalid\"\n                    [tabindex]=\"tabindex\"\n                    [unstyled]=\"unstyled\"\n                    (input)=\"onInput($event, i - 1)\"\n                    (focus)=\"onInputFocus($event)\"\n                    (blur)=\"onInputBlur($event)\"\n                    (paste)=\"onPaste($event)\"\n                    (keydown)=\"onKeyDown($event)\"\n                    pAutoFocus\n                    [autofocus]=\"getAutofocus(i)\"\n                />\n            </ng-container>\n            <ng-container *ngIf=\"inputTemplate\">\n                <ng-container *ngTemplateOutlet=\"inputTemplate; context: { $implicit: getToken(i - 1), events: getTemplateEvents(i - 1), index: i }\"> </ng-container>\n            </ng-container>\n        </ng-container>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-inputotp p-component'\n      },\n      providers: [INPUT_OTP_VALUE_ACCESSOR]\n    }]\n  }], () => [{\n    type: i0.ChangeDetectorRef\n  }], {\n    invalid: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    variant: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    length: [{\n      type: Input\n    }],\n    mask: [{\n      type: Input\n    }],\n    integerOnly: [{\n      type: Input\n    }],\n    autofocus: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onChange: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass InputOtpModule {\n  static ɵfac = function InputOtpModule_Factory(t) {\n    return new (t || InputOtpModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: InputOtpModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, SharedModule, InputTextModule, AutoFocusModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputOtpModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, SharedModule, InputTextModule, AutoFocusModule],\n      exports: [InputOtp, SharedModule],\n      declarations: [InputOtp]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INPUT_OTP_VALUE_ACCESSOR, InputOtp, InputOtpModule };","map":{"version":3,"names":["i1","CommonModule","i0","forwardRef","EventEmitter","booleanAttribute","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","Output","ContentChildren","NgModule","PrimeTemplate","SharedModule","i2","InputTextModule","NG_VALUE_ACCESSOR","i3","AutoFocusModule","_c0","a0","a1","a2","$implicit","events","index","InputOtp_ng_container_0_ng_container_1_Template","rf","ctx","_r1","ɵɵgetCurrentView","ɵɵelementContainerStart","ɵɵelementStart","ɵɵlistener","InputOtp_ng_container_0_ng_container_1_Template_input_input_1_listener","$event","ɵɵrestoreView","i_r2","ɵɵnextContext","ctx_r2","ɵɵresetView","onInput","InputOtp_ng_container_0_ng_container_1_Template_input_focus_1_listener","onInputFocus","InputOtp_ng_container_0_ng_container_1_Template_input_blur_1_listener","onInputBlur","InputOtp_ng_container_0_ng_container_1_Template_input_paste_1_listener","onPaste","InputOtp_ng_container_0_ng_container_1_Template_input_keydown_1_listener","onKeyDown","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","getModelValue","inputType","inputMode","variant","readonly","disabled","invalid","tabindex","unstyled","getAutofocus","InputOtp_ng_container_0_ng_container_2_ng_container_1_Template","ɵɵelementContainer","InputOtp_ng_container_0_ng_container_2_Template","ɵɵtemplate","inputTemplate","ɵɵpureFunction3","getToken","getTemplateEvents","InputOtp_ng_container_0_Template","INPUT_OTP_VALUE_ACCESSOR","provide","useExisting","InputOtp","multi","cd","length","mask","integerOnly","autofocus","onChange","onFocus","onBlur","templates","tokens","onModelChange","onModelTouched","value","constructor","ngAfterContentInit","forEach","item","getType","template","input","event","keydown","focus","emit","blur","paste","target","updateModel","moveToPrev","moveToNext","newValue","join","originalEvent","writeValue","Array","isArray","slice","toString","split","updateTokens","markForCheck","undefined","i","registerOnChange","fn","registerOnTouched","prevInput","findPrevInput","select","nextInput","findNextInput","element","nextElement","nextElementSibling","nodeName","prevElement","previousElementSibling","altKey","ctrlKey","metaKey","code","preventDefault","startsWith","Number","key","clipboardData","getData","pastedCode","substring","isNaN","getRange","n","from","_","trackByFn","ɵfac","InputOtp_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","InputOtp_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","inputs","ɵɵInputFlags","HasDecoratorInputTransform","outputs","features","ɵɵProvidersFeature","ɵɵInputTransformsFeature","decls","vars","consts","InputOtp_Template","dependencies","NgForOf","NgIf","NgTemplateOutlet","InputText","AutoFocus","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","OnPush","None","host","class","providers","transform","InputOtpModule","InputOtpModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["/Users/issam/Desktop/AXE/Share/sharepop/First/node_modules/primeng/fesm2022/primeng-inputotp.mjs"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i2 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i3 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\n\nconst INPUT_OTP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputOtp),\n    multi: true\n};\n/**\n * Input Otp is used to enter one time passwords.\n * @group Components\n */\nclass InputOtp {\n    cd;\n    /**\n     * When present, it specifies that the component should have invalid state style.\n     * @group Props\n     */\n    invalid = false;\n    /**\n     * When present, it specifies that the component should be disabled.\n     * @group Props\n     */\n    disabled = false;\n    /**\n     * When present, it specifies that an input field is read-only.\n     * @group Props\n     */\n    readonly = false;\n    /**\n     * Specifies the input variant of the component.\n     * @group Props\n     */\n    variant = 'outlined';\n    /**\n     * Index of the element in tabbing order.\n     * @group Props\n     */\n    tabindex = null;\n    /**\n     * Number of characters to initiate.\n     * @group Props\n     */\n    length = 4;\n    /**\n     * Mask pattern.\n     * @group Props\n     */\n    mask = false;\n    /**\n     * When present, it specifies that an input field is integer-only.\n     * @group Props\n     */\n    integerOnly = false;\n    /**\n     * When present, it specifies that the component should automatically get focus on load.\n     * @group Props\n     */\n    autofocus;\n    /**\n     * Callback to invoke on value change.\n     * @group Emits\n     */\n    onChange = new EventEmitter();\n    /**\n     * Callback to invoke when the component receives focus.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    onFocus = new EventEmitter();\n    /**\n     * Callback to invoke when the component loses focus.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    onBlur = new EventEmitter();\n    templates;\n    inputTemplate;\n    tokens = [];\n    onModelChange = () => { };\n    onModelTouched = () => { };\n    value;\n    get inputMode() {\n        return this.integerOnly ? 'numeric' : 'text';\n    }\n    get inputType() {\n        return this.mask ? 'password' : 'text';\n    }\n    constructor(cd) {\n        this.cd = cd;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                default:\n                    this.inputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    getToken(index) {\n        return this.tokens[index];\n    }\n    getTemplateEvents(index) {\n        return {\n            input: (event) => this.onInput(event, index),\n            keydown: (event) => this.onKeyDown(event),\n            focus: (event) => this.onFocus.emit(event),\n            blur: (event) => this.onBlur.emit(event),\n            paste: (event) => this.onPaste(event)\n        };\n    }\n    onInput(event, index) {\n        this.tokens[index] = event.target.value;\n        this.updateModel(event);\n        if (event.inputType === 'deleteContentBackward') {\n            this.moveToPrev(event);\n        }\n        else if (event.inputType === 'insertText' || event.inputType === 'deleteContentForward') {\n            this.moveToNext(event);\n        }\n    }\n    updateModel(event) {\n        const newValue = this.tokens.join('');\n        this.onModelChange(newValue);\n        this.onChange.emit({\n            originalEvent: event,\n            value: newValue\n        });\n    }\n    writeValue(value) {\n        if (value) {\n            if (Array.isArray(value) && value.length > 0) {\n                this.value = value.slice(0, this.length);\n            }\n            else {\n                this.value = value.toString().split('').slice(0, this.length);\n            }\n        }\n        else {\n            this.value = value;\n        }\n        this.updateTokens();\n        this.cd.markForCheck();\n    }\n    updateTokens() {\n        if (this.value !== null && this.value !== undefined) {\n            if (Array.isArray(this.value)) {\n                this.tokens = [...this.value];\n            }\n            else {\n                this.tokens = this.value.toString().split('');\n            }\n        }\n        else {\n            this.tokens = [];\n        }\n    }\n    getModelValue(i) {\n        return this.tokens[i - 1] || '';\n    }\n    getAutofocus(i) {\n        if (i === 1) {\n            return this.autofocus;\n        }\n        return false;\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    moveToPrev(event) {\n        let prevInput = this.findPrevInput(event.target);\n        if (prevInput) {\n            prevInput.focus();\n            prevInput.select();\n        }\n    }\n    moveToNext(event) {\n        let nextInput = this.findNextInput(event.target);\n        if (nextInput) {\n            nextInput.focus();\n            nextInput.select();\n        }\n    }\n    findNextInput(element) {\n        let nextElement = element.nextElementSibling;\n        if (!nextElement)\n            return;\n        return nextElement.nodeName === 'INPUT' ? nextElement : this.findNextInput(nextElement);\n    }\n    findPrevInput(element) {\n        let prevElement = element.previousElementSibling;\n        if (!prevElement)\n            return;\n        return prevElement.nodeName === 'INPUT' ? prevElement : this.findPrevInput(prevElement);\n    }\n    onInputFocus(event) {\n        event.target.select();\n        this.onFocus.emit(event);\n    }\n    onInputBlur(event) {\n        this.onBlur.emit(event);\n    }\n    onKeyDown(event) {\n        if (event.altKey || event.ctrlKey || event.metaKey) {\n            return;\n        }\n        switch (event.code) {\n            case 'ArrowLeft':\n                this.moveToPrev(event);\n                event.preventDefault();\n                break;\n            case 'ArrowUp':\n            case 'ArrowDown':\n                event.preventDefault();\n                break;\n            case 'Backspace':\n                if (event.target.value.length === 0) {\n                    this.moveToPrev(event);\n                    event.preventDefault();\n                }\n                break;\n            case 'ArrowRight':\n                this.moveToNext(event);\n                event.preventDefault();\n                break;\n            default:\n                if ((this.integerOnly && !((event.code.startsWith('Digit') || event.code.startsWith('Numpad')) && Number(event.key) >= 0 && Number(event.key) <= 9)) || (this.tokens.join('').length >= this.length && event.code !== 'Delete')) {\n                    event.preventDefault();\n                }\n                break;\n        }\n    }\n    onPaste(event) {\n        let paste = event.clipboardData.getData('text');\n        if (paste.length) {\n            let pastedCode = paste.substring(0, this.length + 1);\n            if (!this.integerOnly || !isNaN(pastedCode)) {\n                this.tokens = pastedCode.split('');\n                this.updateModel(event);\n            }\n        }\n        event.preventDefault();\n    }\n    getRange(n) {\n        return Array.from({ length: n }, (_, index) => index + 1);\n    }\n    trackByFn(index) {\n        return index;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.7\", ngImport: i0, type: InputOtp, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.3.7\", type: InputOtp, selector: \"p-inputOtp\", inputs: { invalid: \"invalid\", disabled: \"disabled\", readonly: \"readonly\", variant: \"variant\", tabindex: \"tabindex\", length: \"length\", mask: \"mask\", integerOnly: \"integerOnly\", autofocus: [\"autofocus\", \"autofocus\", booleanAttribute] }, outputs: { onChange: \"onChange\", onFocus: \"onFocus\", onBlur: \"onBlur\" }, host: { classAttribute: \"p-inputotp p-component\" }, providers: [INPUT_OTP_VALUE_ACCESSOR], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <ng-container *ngFor=\"let i of getRange(length); trackBy: trackByFn\">\n            <ng-container *ngIf=\"!inputTemplate\">\n                <input\n                    type=\"text\"\n                    pInputText\n                    [value]=\"getModelValue(i)\"\n                    [maxLength]=\"1\"\n                    [type]=\"inputType\"\n                    class=\"p-inputotp-input\"\n                    [inputmode]=\"inputMode\"\n                    [variant]=\"variant\"\n                    [readonly]=\"readonly\"\n                    [disabled]=\"disabled\"\n                    [invalid]=\"invalid\"\n                    [tabindex]=\"tabindex\"\n                    [unstyled]=\"unstyled\"\n                    (input)=\"onInput($event, i - 1)\"\n                    (focus)=\"onInputFocus($event)\"\n                    (blur)=\"onInputBlur($event)\"\n                    (paste)=\"onPaste($event)\"\n                    (keydown)=\"onKeyDown($event)\"\n                    pAutoFocus\n                    [autofocus]=\"getAutofocus(i)\"\n                />\n            </ng-container>\n            <ng-container *ngIf=\"inputTemplate\">\n                <ng-container *ngTemplateOutlet=\"inputTemplate; context: { $implicit: getToken(i - 1), events: getTemplateEvents(i - 1), index: i }\"> </ng-container>\n            </ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.InputText, selector: \"[pInputText]\", inputs: [\"variant\"] }, { kind: \"directive\", type: i3.AutoFocus, selector: \"[pAutoFocus]\", inputs: [\"autofocus\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.7\", ngImport: i0, type: InputOtp, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-inputOtp',\n                    template: `\n        <ng-container *ngFor=\"let i of getRange(length); trackBy: trackByFn\">\n            <ng-container *ngIf=\"!inputTemplate\">\n                <input\n                    type=\"text\"\n                    pInputText\n                    [value]=\"getModelValue(i)\"\n                    [maxLength]=\"1\"\n                    [type]=\"inputType\"\n                    class=\"p-inputotp-input\"\n                    [inputmode]=\"inputMode\"\n                    [variant]=\"variant\"\n                    [readonly]=\"readonly\"\n                    [disabled]=\"disabled\"\n                    [invalid]=\"invalid\"\n                    [tabindex]=\"tabindex\"\n                    [unstyled]=\"unstyled\"\n                    (input)=\"onInput($event, i - 1)\"\n                    (focus)=\"onInputFocus($event)\"\n                    (blur)=\"onInputBlur($event)\"\n                    (paste)=\"onPaste($event)\"\n                    (keydown)=\"onKeyDown($event)\"\n                    pAutoFocus\n                    [autofocus]=\"getAutofocus(i)\"\n                />\n            </ng-container>\n            <ng-container *ngIf=\"inputTemplate\">\n                <ng-container *ngTemplateOutlet=\"inputTemplate; context: { $implicit: getToken(i - 1), events: getTemplateEvents(i - 1), index: i }\"> </ng-container>\n            </ng-container>\n        </ng-container>\n    `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-inputotp p-component'\n                    },\n                    providers: [INPUT_OTP_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { invalid: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], variant: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], mask: [{\n                type: Input\n            }], integerOnly: [{\n                type: Input\n            }], autofocus: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onChange: [{\n                type: Output\n            }], onFocus: [{\n                type: Output\n            }], onBlur: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass InputOtpModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.7\", ngImport: i0, type: InputOtpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.7\", ngImport: i0, type: InputOtpModule, declarations: [InputOtp], imports: [CommonModule, SharedModule, InputTextModule, AutoFocusModule], exports: [InputOtp, SharedModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.7\", ngImport: i0, type: InputOtpModule, imports: [CommonModule, SharedModule, InputTextModule, AutoFocusModule, SharedModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.7\", ngImport: i0, type: InputOtpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, SharedModule, InputTextModule, AutoFocusModule],\n                    exports: [InputOtp, SharedModule],\n                    declarations: [InputOtp]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INPUT_OTP_VALUE_ACCESSOR, InputOtp, InputOtpModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}